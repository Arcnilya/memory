#!/usr/bin/env python3.6
import sys
import os
import argparse
import json
import re
import isbnlib
from datetime import date

today = date.today()
CURRENT_DATE = "{}{}{}".format(
    format(today.day, '02'), 
    format(today.month, '02'),
    str(today.year)[2:])
NONCE = 0

temp_name = "test.json"
DEBUG_MODE = True

# ========== Messages ==========

# ========== Read/Write ==========
def read_json():
  with open(temp_name, 'r') as f:
    return json.load(f)

def write_json(content):
  with open(temp_name, 'w') as f:
    json.dump(content, f, indent=4)

# =========== Utils ==============

# ========== Functions ===========
def add_memory(args, memories):
	if DEBUG_MODE:
		print("add_memory({})".format(args))

	memory = {}
	memory['category'] = str(input("Category: "))
	memory['question'] = str(input("Question: "))
	memory['answer'] = str(input("Answer: ")).lower()
	memory['times_shown'] = 0
	memory['timer'] = 1
	memory['created'] = CURRENT_DATE
	memory['last_shown'] = CURRENT_DATE
	memory['id'] = memories[1]
	
	memories[1] += 1 # increase nonce used for ID
	memories[0].append(memory)
	return memories

def remove_memory(args, memories):
	if DEBUG_MODE:
		print("remove_memory({})".format(args)) # args[id]

	for memory in memories[0]:
		if args[0] == memory['id']:
			memories[0].remove(memory)
			print("Memory removed")
			return memories
	exit("Memory not found")

def list_memories(args, memories):
	if DEBUG_MODE:
		print("list_memories({})".format(args)) # args[None]
	for memory in memories[0]:
		print("{}".format(memory))

	return memories


def help_print(args, memories):
	print("How to use memory")
	print("Commands:\n")

	return memories


def main():
	memories = [[], NONCE]


	commands = {
		'add': add_memory,
		'remove': remove_memory,
		'list': list_memories,
		'help': help_print,
	}

	if len(sys.argv) < 2:
		exit(ERR_ARGLEN_MSG)
  
	if not sys.argv[1] in commands.keys():
		exit(ERR_NOKEY_MSG)

	try:
		memories = read_json()
	except:
		print("Memories not found, creating new memory set")

	memories = commands[sys.argv[1]](sys.argv[2:], memories)
	write_json(memories)

if __name__ == "__main__":
	main()
